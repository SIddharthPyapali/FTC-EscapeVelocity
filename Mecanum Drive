// Created by #14343 Escape Velocity

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.sun.tools.javac.tree.DCTree;

@TeleOp(name="Mecanum Drive", group="TeamCode")
//@Disabled

public class MecanumDrive extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    DcMotor armMotor1, armMotor2, latchMotor, LFMotor, LBMotor, RFMotor, RBMotor;
    float   latchPower,LFPower, LBPower, RFPower, RBPower, xValue, strafeValue, yValue, latchValue;

    Servo winchServo1, winchServo2, intake;
    float winchPower, intakePower, winchValue1, winchValue2, intakeValue;

    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).
        armMotor1 = hardwareMap.get(DcMotor.class, "Arm Motor 1");
        armMotor1 = hardwareMap.get(DcMotor.class, "Arm Motor 2");
        latchMotor = hardwareMap.get(DcMotor.class, "Latch Motor");
        LFMotor  = hardwareMap.get(DcMotor.class, "LF Motor");
        LBMotor  = hardwareMap.get(DcMotor.class, "LB Motor");
        RFMotor  = hardwareMap.get(DcMotor.class, "RF Motor");
        RBMotor  = hardwareMap.get(DcMotor.class, "RB Motor");

        winchServo1 = hardwareMap.get(Servo.class, "Winch Servo 1");
        winchServo2 = hardwareMap.get(Servo.class, "Winch Servo 2");
        intake = hardwareMap.get(Servo.class, "Intake");

        // Most robots need the motor on one side to be reversed to drive forward
        // Reverse the motor that runs backwards when connected directly to the battery
        armMotor1.setDirection(DcMotor.Direction.FORWARD);
        armMotor2.setDirection(DcMotor.Direction.REVERSE);
        LFMotor.setDirection(DcMotor.Direction.FORWARD);
        LBMotor.setDirection(DcMotor.Direction.FORWARD);
        RFMotor.setDirection(DcMotor.Direction.REVERSE);
        RBMotor.setDirection(DcMotor.Direction.REVERSE);
        latchMotor.setDirection(DcMotor.Direction.REVERSE);

        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
            // POV Mode uses left stick to go forward, and right stick to turn.
            // - This uses basic math to combine motions and is easier to drive straight.
            //https://www.youtube.com/watch?v=v7CujEW0wgc

         /*
        Pseudo code for mecanum wheels to drive forward, turn, and strafe
        Wheel	              Forward/Backward		    Turn Right/Left		        Strafe Right/Left
        Left Front Wheel	Left Joy Stick Y Axis	+	Right Joy Stick X Axis	+	Left Joystick X Axis
        Left Back Wheel	    Left Joy Stick Y Axis	+	Right Joy Stick X Axis	-	Left Joystick X Axis
        Right Back Wheel	Left Joy Stick Y Axis	+	Right Joy Stick X Axis	+	Left Joystick X Axis
        Right Front Wheel	Left Joy Stick Y Axis	+	Right Joy Stick X Axis	-	Left Joystick X Axis
        */
            latchValue = gamepad2.right_stick_x;
            xValue = gamepad1.left_stick_y;
            strafeValue = gamepad1.left_stick_x;
            yValue = gamepad1.right_stick_x;

            winchValue1=gamepad2.left_stick_y;
            winchValue2=gamepad2.left_stick_y;

            latchPower = latchValue + latchValue;
            LFPower = xValue + yValue + strafeValue;
            LBPower = xValue + yValue - strafeValue;
            RBPower = xValue - yValue + strafeValue;
            RFPower = xValue - yValue - strafeValue;

            // Send calculated power to wheels
            latchMotor.setPower(Range.clip(latchPower, -0.75, 0.75));
            LFMotor.setPower(Range.clip(LFPower, -1, 1));
            LBMotor.setPower(Range.clip(LBPower, -1, 1));
            RFMotor.setPower(Range.clip(RFPower, -1, 1));
            RBMotor.setPower(Range.clip(RBPower, -1, 1));

            // arm motor is mapped to the bumpers
            if(gamepad2.right_bumper){
                armMotor1.setPower(0.5);
                armMotor2.setPower(0.5);
            }
            if (gamepad2.left_bumper){
                armMotor1.setPower(-0.5);
                armMotor2.setPower(-0.5);
            }
            if (gamepad2.a){
                armMotor1.setPower(0);
                armMotor2.setPower(0);
            }

            // Show the elapsed game time and wheel power.
            //telemetry.addData("Status", "Run Time: " + runtime.toString());
            //telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
            //telemetry.update();
        }
    }
}
